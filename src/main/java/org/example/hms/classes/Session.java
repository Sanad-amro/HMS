package org.example.hms.classes;

import java.sql.*;
import java.time.LocalDate;
import java.util.ArrayList;

public class Session {

    // Database connection details
    private static final String DB_URL = "jdbc:mysql://195.123.166.125:3306/akram";
    private static final String DB_USER = "sanad";
    private static final String DB_PASSWORD = "sanad";

    // Session variables
    private int sessionId; // Auto-generated by SQL
    private int patientId; // Foreign key
    private int hgb;
    private int height;
    private int weight;
    private int bloodGlucose;
    private int fastingBloodGlucose;
    private int randomBloodGlucose;
    private int heartRate;
    private int diastolicBloodPressure;
    private int systolicBloodPressure;
    private String bloodPressure; // BP1/BP2 as a combined value
    private String chiefComplaint;
    private String medicalHistory;
    private String medicalAndSurgicalHistory;
    private String obstetricHistory;
    private String gynecologicalHistory;
    private String doctorAndMidwifeNote;
    private String diagnosis;
    private String currentMedications;
    private String prescribedMedications;
    private String nutritionistNote;
    private String physiotherapistNote;
    private String addedBy; // New variable
    private int day;
    private int month;
    private int year;
    private String address; // New address field

    public int getSessionId() {
        return sessionId;
    }

    public void setSessionId(int sessionId) {
        this.sessionId = sessionId;
    }

    public int getPatientId() {
        return patientId;
    }

    public void setPatientId(int patientId) {
        this.patientId = patientId;
    }

    public int getHgb() {
        return hgb;
    }

    public void setHgb(int hgb) {
        this.hgb = hgb;
    }

    public int getHeight() {
        return height;
    }

    public void setHeight(int height) {
        this.height = height;
    }

    public int getWeight() {
        return weight;
    }

    public void setWeight(int weight) {
        this.weight = weight;
    }

    public int getBloodGlucose() {
        return bloodGlucose;
    }

    public void setBloodGlucose(int bloodGlucose) {
        this.bloodGlucose = bloodGlucose;
    }

    public int getFastingBloodGlucose() {
        return fastingBloodGlucose;
    }

    public void setFastingBloodGlucose(int fastingBloodGlucose) {
        this.fastingBloodGlucose = fastingBloodGlucose;
    }

    public int getRandomBloodGlucose() {
        return randomBloodGlucose;
    }

    public void setRandomBloodGlucose(int randomBloodGlucose) {
        this.randomBloodGlucose = randomBloodGlucose;
    }

    public int getHeartRate() {
        return heartRate;
    }

    public void setHeartRate(int heartRate) {
        this.heartRate = heartRate;
    }

    public int getDiastolicBloodPressure() {
        return diastolicBloodPressure;
    }

    public void setDiastolicBloodPressure(int diastolicBloodPressure) {
        this.diastolicBloodPressure = diastolicBloodPressure;
    }

    public int getSystolicBloodPressure() {
        return systolicBloodPressure;
    }

    public void setSystolicBloodPressure(int systolicBloodPressure) {
        this.systolicBloodPressure = systolicBloodPressure;
    }

    public String getBloodPressure() {
        return bloodPressure;
    }

    public void setBloodPressure(String bloodPressure) {
        this.bloodPressure = bloodPressure;
    }

    public String getChiefComplaint() {
        return chiefComplaint;
    }

    public void setChiefComplaint(String chiefComplaint) {
        this.chiefComplaint = chiefComplaint;
    }

    public String getMedicalHistory() {
        return medicalHistory;
    }

    public void setMedicalHistory(String medicalHistory) {
        this.medicalHistory = medicalHistory;
    }

    public String getMedicalAndSurgicalHistory() {
        return medicalAndSurgicalHistory;
    }

    public void setMedicalAndSurgicalHistory(String medicalAndSurgicalHistory) {
        this.medicalAndSurgicalHistory = medicalAndSurgicalHistory;
    }

    public String getObstetricHistory() {
        return obstetricHistory;
    }

    public void setObstetricHistory(String obstetricHistory) {
        this.obstetricHistory = obstetricHistory;
    }

    public String getGynecologicalHistory() {
        return gynecologicalHistory;
    }

    public void setGynecologicalHistory(String gynecologicalHistory) {
        this.gynecologicalHistory = gynecologicalHistory;
    }

    public String getDoctorAndMidwifeNote() {
        return doctorAndMidwifeNote;
    }

    public void setDoctorAndMidwifeNote(String doctorAndMidwifeNote) {
        this.doctorAndMidwifeNote = doctorAndMidwifeNote;
    }

    public String getDiagnosis() {
        return diagnosis;
    }

    public void setDiagnosis(String diagnosis) {
        this.diagnosis = diagnosis;
    }

    public String getCurrentMedications() {
        return currentMedications;
    }

    public void setCurrentMedications(String currentMedications) {
        this.currentMedications = currentMedications;
    }

    public String getPrescribedMedications() {
        return prescribedMedications;
    }

    public void setPrescribedMedications(String prescribedMedications) {
        this.prescribedMedications = prescribedMedications;
    }

    public String getNutritionistNote() {
        return nutritionistNote;
    }

    public void setNutritionistNote(String nutritionistNote) {
        this.nutritionistNote = nutritionistNote;
    }

    public String getPhysiotherapistNote() {
        return physiotherapistNote;
    }

    public void setPhysiotherapistNote(String physiotherapistNote) {
        this.physiotherapistNote = physiotherapistNote;
    }

    public String getAddedBy() {
        return addedBy;
    }

    public void setAddedBy(String addedBy) {
        this.addedBy = addedBy;
    }

    public int getDay() {
        return day;
    }

    public void setDay(int day) {
        this.day = day;
    }

    public int getMonth() {
        return month;
    }

    public void setMonth(int month) {
        this.month = month;
    }

    public int getYear() {
        return year;
    }

    public void setYear(int year) {
        this.year = year;
    }

    // Constructor to automatically set day, month, and year based on today's date
    public Session() {
        LocalDate today = LocalDate.now();
        this.day = today.getDayOfMonth();
        this.month = today.getMonthValue();
        this.year = today.getYear();
    }

    // Getter and setter for the address
    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    // Function to check the connection and ensure necessary tables exist
    private static Connection getConnection() throws SQLException {
        return DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
    }

    private static void checkConnection() {
        try (Connection conn = getConnection()) {
            Statement stmt = conn.createStatement();

            // Check if the database exists
            stmt.executeUpdate("CREATE DATABASE IF NOT EXISTS akram");

            // Check if the required tables exist and create them if not
            String[] tables = {"doctors", "patients", "inventory", "sessions"};
            for (String table : tables) {
                String createTableSQL = getCreateTableSQL(table);
                stmt.executeUpdate(createTableSQL);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // Method to get the SQL to create a table if it doesn't exist
    private static String getCreateTableSQL(String table) {
        switch (table) {
            case "sessions":
                return "CREATE TABLE IF NOT EXISTS sessions (" +
                        "session_id INT AUTO_INCREMENT PRIMARY KEY, " +
                        "patient_id INT NOT NULL, " +
                        "hgb INT, height INT, weight INT, blood_glucose INT, fasting_blood_glucose INT, random_blood_glucose INT, " +
                        "heart_rate INT, diastolic_blood_pressure INT, systolic_blood_pressure INT, blood_pressure VARCHAR(10), " +
                        "chief_complaint VARCHAR(255), medical_history TEXT, medical_and_surgical_history TEXT, " +
                        "obstetric_history TEXT, gynecological_history TEXT, doctor_and_midwife_note TEXT, " +
                        "diagnosis TEXT, current_medications TEXT, prescribed_medications TEXT, " +
                        "nutritionist_note TEXT, physiotherapist_note TEXT, added_by VARCHAR(100), " +
                        "address VARCHAR(255), " + // Added address field
                        "created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, " + // Auto-generated
                        "day INT, month INT, year INT, " +
                        "FOREIGN KEY (patient_id) REFERENCES patients(id))";
            case "doctors":
                return "CREATE TABLE IF NOT EXISTS doctors (" +
                        "id INT PRIMARY KEY AUTO_INCREMENT, " +
                        "name VARCHAR(100), speciality VARCHAR(100), sector VARCHAR(100), " +
                        "username VARCHAR(100), password VARCHAR(100), email VARCHAR(100), " +
                        "address VARCHAR(255))";
            case "patients":
                return "CREATE TABLE IF NOT EXISTS patients (" +
                        "id INT PRIMARY KEY, " +
                        "name VARCHAR(100), " +
                        "phone_number VARCHAR(15), " +
                        "address VARCHAR(255), " +
                        "age INT,"+"added_By VARCHAR(255));";
            case "inventory":
                return "CREATE TABLE IF NOT EXISTS inventory (" +
                        "item_id INT PRIMARY KEY AUTO_INCREMENT, " +
                        "name VARCHAR(100), quantity INT, expire_date VARCHAR(10))";
            default:
                return "";
        }
    }

    // CRUD operations for the sessions table
    public static void addSession(Session session) {
        checkConnection();
        String query = "INSERT INTO sessions (patient_id, hgb, height, weight, blood_glucose, fasting_blood_glucose, random_blood_glucose, " +
                "heart_rate, diastolic_blood_pressure, systolic_blood_pressure, blood_pressure, " +
                "chief_complaint, medical_history, medical_and_surgical_history, obstetric_history, gynecological_history, " +
                "doctor_and_midwife_note, diagnosis, current_medications, prescribed_medications, nutritionist_note, " +
                "physiotherapist_note, added_by, address, day, month, year) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (Connection conn = getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, session.patientId);
            stmt.setInt(2, session.hgb);
            stmt.setInt(3, session.height);
            stmt.setInt(4, session.weight);
            stmt.setInt(5, session.bloodGlucose);
            stmt.setInt(6, session.fastingBloodGlucose);
            stmt.setInt(7, session.randomBloodGlucose);
            stmt.setInt(8, session.heartRate);
            stmt.setInt(9, session.diastolicBloodPressure);
            stmt.setInt(10, session.systolicBloodPressure);
            stmt.setString(11, session.bloodPressure);
            stmt.setString(12, session.chiefComplaint);
            stmt.setString(13, session.medicalHistory);
            stmt.setString(14, session.medicalAndSurgicalHistory);
            stmt.setString(15, session.obstetricHistory);
            stmt.setString(16, session.gynecologicalHistory);
            stmt.setString(17, session.doctorAndMidwifeNote);
            stmt.setString(18, session.diagnosis);
            stmt.setString(19, session.currentMedications);
            stmt.setString(20, session.prescribedMedications);
            stmt.setString(21, session.nutritionistNote);
            stmt.setString(22, session.physiotherapistNote);
            stmt.setString(23, session.addedBy);
            stmt.setString(24, session.address); // Set address
            stmt.setInt(25, session.day);
            stmt.setInt(26, session.month);
            stmt.setInt(27, session.year);
            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static ArrayList<Session> getAllSessions() {
        checkConnection();
        ArrayList<Session> sessionsList = new ArrayList<>();
        String query = "SELECT * FROM sessions";
        try (Connection conn = getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                Session session = new Session();
                session.sessionId = rs.getInt("session_id");
                session.patientId = rs.getInt("patient_id");
                session.hgb = rs.getInt("hgb");
                session.height = rs.getInt("height");
                session.weight = rs.getInt("weight");
                session.bloodGlucose = rs.getInt("blood_glucose");
                session.fastingBloodGlucose = rs.getInt("fasting_blood_glucose");
                session.randomBloodGlucose = rs.getInt("random_blood_glucose");
                session.heartRate = rs.getInt("heart_rate");
                session.diastolicBloodPressure = rs.getInt("diastolic_blood_pressure");
                session.systolicBloodPressure = rs.getInt("systolic_blood_pressure");
                session.bloodPressure = rs.getString("blood_pressure");
                session.chiefComplaint = rs.getString("chief_complaint");
                session.medicalHistory = rs.getString("medical_history");
                session.medicalAndSurgicalHistory = rs.getString("medical_and_surgical_history");
                session.obstetricHistory = rs.getString("obstetric_history");
                session.gynecologicalHistory = rs.getString("gynecological_history");
                session.doctorAndMidwifeNote = rs.getString("doctor_and_midwife_note");
                session.diagnosis = rs.getString("diagnosis");
                session.currentMedications = rs.getString("current_medications");
                session.prescribedMedications = rs.getString("prescribed_medications");
                session.nutritionistNote = rs.getString("nutritionist_note");
                session.physiotherapistNote = rs.getString("physiotherapist_note");
                session.addedBy = rs.getString("added_by");
                session.address = rs.getString("address"); // Retrieve address
                session.day = rs.getInt("day");
                session.month = rs.getInt("month");
                session.year = rs.getInt("year");
                sessionsList.add(session);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return sessionsList;
    }
}
